{
"Parameters" : {

"SSHUserName" : {
"Description" : "The user name used to ssh into an instance",
"AllowedValues" : [
"centos",
"ec2-user",
"ubuntu"               
],
"Type" : "String",
"Default" : "ec2-user"
},
"HPCCManagedServiceIP" : {
"Description" : "Publc IP of HPCC Managed Service",
"Type" : "String",
"Default" : "52.1.32.158"
},
"MyEmailAddress" : {
"Description" : "Email where private key and ecl watch public ip will be sent.",
"AllowedPattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$",
"ConstraintDescription": "ENTER A VALID EMAIL",
"Type" : "String",
"Default" : "tlhumphrey2@gmail.com"
},

"HPCCPlatform" : {
"Description" : "The version of the HPCC Platform to install.",
"Default" : "HPCC-Platform-7.6.18-1",
"Type" : "String"
},

"EBSVolumesMaster" : {
"Description" : "Size in GBs of EBS Volume for Master",
"ConstraintDescription" : "Must be an integer between 10 and 16384 (16TB) inclusive",
"Type" : "Number",
"MaxValue" : 16384,
"MinValue" : 10,
"Default" : 10
},

"EBSVolumesSlave" : {
"Description" : "Size in GBs of EBS Volume for Slaves",
"ConstraintDescription" : "Must be an integer between 10 and 16384 (16TB) inclusive",
"Type" : "Number",
"MaxValue" : 16384,
"MinValue" : 10,
"Default" : 10
},

"EBSVolumesRoxie" : {
"Description" : "Size in GBs of EBS Volume for Roxie",
"ConstraintDescription" : "Must be an integer between 10 and 16384 (16TB) inclusive",
"Type" : "Number",
"MaxValue" : 16384,
"MinValue" : 10,
"Default" : 10
},

"InstallCassandra" : {
"Description" : "(Optional) YES or NO to install Cassandra",
"AllowedValues" : [
"NO",
"YES"
],
"Type" : "String",
"Default" : "NO"
},

"UserNameAndPassword" : {
"Description" : "(Optional) Enter like: username/password Used to log into ECL Watch and ECL IDE.",
"Type" : "String",
"Default" : ""
},

"NumberOfSlaveInstances" : {
"Description" : "Number of Slave instances to be launched",
"Type" : "Number",
"Default" : "1"
},

"NumberOfRoxieInstances" : {
"Description" : "Number of Roxie nodes in deployed HPCC System",
"Type" : "Number",
"Default" : "0"
},

"NumberOfSlavesPerInstance" : {
"Description" : "Number of THOR slave nodes per slave instance",
"Type" : "Number",
"Default" : "1"
},

"NumberOfChannelsPerSlave" : {
"Description" : "Number of channels (threads) per slave. ONLY ALLOWED WITH version 6 of the HPCC Platform.",
"Type" : "Number",
"Default" : "1"
},

"BastionInstanceType" : {
"Description" : "Bastion Instance type",
"Type" : "String",
"Default" : "t2.micro"
},

"ClusterInstanceType" : {
"Description" : "HPCC Thor Master EC2 instance type",
"Default" : "r4.large",
"Type" : "String"
},
"HMSCIDR" : {
"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
"ConstraintDescription" : "Used for ssh, i.e. port 22.",
 "Default" : "52.1.32.158/32",
"Description" : "(DEFAULT ANY IP) CIDR block used for ssh and port 8010. Must be a valid CIDR range of the form x.x.x.x/x.",
"MaxLength" : "18",
"MinLength" : "9",
"Type" : "String"
},
"AdminCIDR" : {
"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
"ConstraintDescription" : "Used for ssh, i.e. port 22.",
 "Default" : "0.0.0.0/0",
"Description" : "(DEFAULT ANY IP) CIDR block used for ssh and port 8010. Must be a valid CIDR range of the form x.x.x.x/x.",
"MaxLength" : "18",
"MinLength" : "9",
"Type" : "String"
}
},

"Mappings" : {
"RegionMap" : {
"us-east-1" : { "64" : "ami-062f7200baf2fa504" },
"us-east-2" : { "64" : "ami-02ccb28830b645a41" },
"us-west-2" : { "64" : "ami-04590e7389a6e577c" },
"us-west-1" : { "64" : "ami-03caa3f860895f82e" },
"ca-central-1" : { "64" : "ami-054362537f5132ce2" },
"eu-west-1" : { "64" : "ami-0713f98de93617bb4" },
"eu-central-1" : { "64" : "ami-07cda0db070313c52" },
"ap-southeast-1" : { "64" : "ami-05c64f7b4062b0a21" },
"ap-southeast-2" : { "64" : "ami-0b8b10b5bf11f3a22" },
"ap-northeast-1" : { "64" : "ami-011facbea5ec0363b" },
"sa-east-1" : { "64" : "ami-09de7b4017733e2af" }
}
},

"Conditions" : {

"CassandraIsInstalled" : {
"Fn::Equals": [
{"Ref": "InstallCassandra"},
"YES"
]
}
},

"Resources" : {        

"MySQSQueue" : {
"Type" : "AWS::SQS::Queue",
"Properties" : {
"QueueName" : { "Ref": "AWS::StackName" }
}
},

"HPCCPlacementGroup" : {
"Type" : "AWS::EC2::PlacementGroup",
"Properties" : {
"Strategy" : "cluster"
}
},

"HPCCInstanceRoles": {
"Type": "AWS::IAM::Role",
"Properties": {
"AssumeRolePolicyDocument": {
"Version" : "2012-10-17",
"Statement": [ {
"Effect": "Allow",
"Principal": {
"Service": [ "ec2.amazonaws.com" ]
},
"Action": [ "sts:AssumeRole" ]
} ]
},
"Path": "/",
"Policies": [ {
"PolicyName": "root",
"PolicyDocument": {
"Version" : "2012-10-17",
"Statement": [ {
"Effect": "Allow",
"Action": "*",
"Resource": "*"
} ]
}
} ]
}
},

"HPCCInstanceProfile" : {
"Type": "AWS::IAM::InstanceProfile",
"Properties": {
"Path": "/",
"Roles": [ { "Ref" : "HPCCInstanceRoles" } ]
}
},

"HPCCVpc" : {
"Type" : "AWS::EC2::VPC",
"Properties" : {
"CidrBlock": "10.0.0.0/16"
}
},
"InternetGateway" : {
"Type" : "AWS::EC2::InternetGateway"
},

"PublicInternetRoute" : {
"Type" : "AWS::EC2::Route",
"DependsOn" : [ "InternetGateway", "PublicInternetRouteTable", "VPCGatewayAttachment" ] ,
"Properties" : {
"DestinationCidrBlock" : "0.0.0.0/0",
"GatewayId" : { "Ref" : "InternetGateway" },
"RouteTableId" : { "Ref" : "PublicInternetRouteTable" }
}
},

"VPCGatewayAttachment" : {
"Type" : "AWS::EC2::VPCGatewayAttachment",
"Properties" : {
"InternetGatewayId" : { "Ref" : "InternetGateway" },
"VpcId" : { "Ref" : "HPCCVpc" }
}
},

"PublicInternetRouteTable" : {
"Type" : "AWS::EC2::RouteTable",
"Properties" : {
"VpcId" : { "Ref" : "HPCCVpc" }
}
},

"HPCCSubnet" : {
"Type" : "AWS::EC2::Subnet",
"Properties" :  {
"CidrBlock": "10.0.0.0/24", 
"AvailabilityZone" : {"Fn::Join" : ["",[{"Ref" : "AWS::Region"},"b"]]},
"VpcId": { "Ref" : "HPCCVpc" }, 
"Tags": [{ "Value": "HPCC-Public-subnet","Key": "Name"}] 
}
},

"SubnetRouteTableAssociation" : {
"Type" : "AWS::EC2::SubnetRouteTableAssociation",
"Properties" : {
"RouteTableId" : { "Ref" : "PublicInternetRouteTable" },
"SubnetId" : { "Ref" : "HPCCSubnet" }
}
},

"HPCCSecurityGroups": {
"Type" : "AWS::EC2::SecurityGroup",
"Properties" : {
"GroupDescription" : "The following properities are the ports that an HPCC System needs",
"SecurityGroupEgress": [
{
"IpProtocol": "-1", 
"CidrIp": "0.0.0.0/0"
}
], 
"SecurityGroupIngress": [
{
"ToPort": 8888, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8888
}, 
{
"ToPort": 9042, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 9042
}, 
{
"ToPort": 7000, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 7000
}, 
{
"ToPort": 7001, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 7001
}, 
{
"ToPort": 7199, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 7199
}, 
{
"ToPort": 9160, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 9160
}, 
{
"ToPort": 61620, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 61620
}, 
{
"ToPort": 61621, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 61621
}, 
{
"ToPort": 8002, 
"IpProtocol": "tcp", 
"CidrIp": "0.0.0.0/0",
"FromPort": 8002
}, 
{
"ToPort": 8002, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8002
}, 
{
"ToPort": 8015, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8015
}, 
{
"ToPort": 8010, 
"IpProtocol": "tcp", 
"CidrIp": "0.0.0.0/0",
"FromPort": 8010
}, 
{
"ToPort": 8010, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8010
}, 
{
"ToPort": 8145, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8145
}, 
{
"ToPort": 22, 
"IpProtocol": "tcp", 
"CidrIp": { "Ref" : "HMSCIDR" },
"FromPort": 22
}, 
{
"ToPort": 22, 
"IpProtocol": "tcp", 
"CidrIp": { "Ref" : "AdminCIDR" },
"FromPort": 22
}, 
{
"ToPort": 22, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 22
}, 
{
"ToPort": 65535, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 0
}, 
{
"ToPort": 8050, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8050
}, 
{
"ToPort": 65535, 
"IpProtocol": "udp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 0
}, 
{
"ToPort": 8008, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 8008
}, 
{
"ToPort": 9876, 
"IpProtocol": "tcp", 
"CidrIp": "10.0.0.0/16",
"FromPort": 9876
}, 
{
"ToPort": -1, 
"IpProtocol": "icmp", 
"CidrIp": "10.0.0.0/16",
"FromPort": -1
}
], 
"VpcId": { "Ref": "HPCCVpc" } 
}
},

"BastionInstance" : {
"Type" : "AWS::EC2::Instance",
"Properties" : {
"ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "64"]},
"InstanceType" : {
"Ref" : "BastionInstanceType"
},
"NetworkInterfaces": [ {
"AssociatePublicIpAddress": "true",
"DeviceIndex": "0",
"GroupSet": [{ "Ref" : "HPCCSecurityGroups" }],
"SubnetId": { "Ref" : "HPCCSubnet" }
} ],

"BlockDeviceMappings" : [
{
"DeviceName": "/dev/sdb",
"VirtualName": "ephemeral0"
},
{
"DeviceName": "/dev/sdc",
"VirtualName": "ephemeral1"
},
{
"DeviceName": "/dev/sdd",
"VirtualName": "ephemeral2"
},
{
"DeviceName": "/dev/sde",
"VirtualName": "ephemeral3"
},
{
"DeviceName": "/dev/sdf",
"VirtualName": "ephemeral4"
},
{
"DeviceName": "/dev/sdg",
"VirtualName": "ephemeral5"
},
{
"DeviceName": "/dev/sdh",
"VirtualName": "ephemeral6"
},
{
"DeviceName": "/dev/sdi",
"VirtualName": "ephemeral7"
},
{
"DeviceName": "/dev/sdj",
"VirtualName": "ephemeral8"
},
{
"DeviceName": "/dev/sdk",
"VirtualName": "ephemeral9"
},
{
"DeviceName": "/dev/sdl",
"VirtualName": "ephemeral10"
},
{
"DeviceName": "/dev/sdm",
"VirtualName": "ephemeral11"
},
{
"DeviceName": "/dev/sdn",
"VirtualName": "ephemeral12"
},
{
"DeviceName": "/dev/sdo",
"VirtualName": "ephemeral13"
},
{
"DeviceName": "/dev/sdp",
"VirtualName": "ephemeral14"
},
{
"DeviceName": "/dev/sdq",
"VirtualName": "ephemeral15"
},
{
"DeviceName": "/dev/sdr",
"VirtualName": "ephemeral16"
},
{
"DeviceName": "/dev/sds",
"VirtualName": "ephemeral17"
},
{
"DeviceName": "/dev/sdt",
"VirtualName": "ephemeral18"
},
{
"DeviceName": "/dev/sdu",
"VirtualName": "ephemeral19"
},
{
"DeviceName": "/dev/sdv",
"VirtualName": "ephemeral20"
},
{
"DeviceName": "/dev/sdw",
"VirtualName": "ephemeral21"
},
{
"DeviceName": "/dev/sdx",
"VirtualName": "ephemeral22"
},
{
"DeviceName": "/dev/sdy",
"VirtualName": "ephemeral23"
}
],

"Tags" : [
{
"Key" : "StackName",
"Value" : {"Ref" : "AWS::StackName" }
},
{
"Key" : "Name",
"Value" : {
"Fn::Join" : ["-",
[{
"Ref" : "AWS::StackName"
},
"-Bastion"
]]
}
}
],
"IamInstanceProfile" : {"Ref" : "HPCCInstanceProfile" },
"UserData" : {
"Fn::Base64" : {
"Fn::Join" : ["\n",
["#!/bin/bash", 
"# SETUP LOGGING OF EVERYTHING THIS SCRIPT DOES TO /var/log/user-data.log",
"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
"yum -y clean all\n",
"yum-config-manager --enable epel\n",
"yum -y update --security\n",
"yum -y update aws-cfn-bootstrap\n",
"echo yum -y install gcc\n",
"yum -y install gcc",
"echo pip install plumbum",
"pip install plumbum",
"yum -y install aws-cli",
{
"Fn::Join" : [
"", 
[
"sshuser=", 
{ "Ref" : "SSHUserName" }
]
]
},
"echo TLH: sshuser=\"$sshuser\"",
"# DOWNLOAD THE CONTENTS OF THE S3 BUCKET, s3://publichpcc",
{
"Fn::Join" : [
" ", 
[
"aws s3 cp s3://publichpcc", 
"/home/$sshuser --recursive"
]
]
},
"echo SCRIPT: START put HPCC Managed Service IP in managed-service-ip.txt",
{
"Fn::Join" : [
"", 
[
"echo \"",
{ "Ref": "HPCCManagedServiceIP" },
"\" > /home/$sshuser/managed-service-ip.txt" 
]
]
},
"echo SCRIPT: COMPLETED put HPCC Managed Service IP in managed-service-ip.txt",
"# MAKE SURE OWNERSHIP IS $sshuser AND EXECUTE PERMISSIONS ON ALL SCRIPTS",
"chown $sshuser:$sshuser /home/$sshuser/*",
"chmod 755 /home/$sshuser/*.sh",
"chmod 755 /home/$sshuser/*.pl",
"chmod 755 /home/$sshuser/*s3",
"chmod 755 /home/$sshuser/*.py",
"chown $sshuser:$sshuser /home/$sshuser/StopStartHPCC/*",
"chmod 755 /home/$sshuser/StopStartHPCC/*.sh",
"chmod 755 /home/$sshuser/StopStartHPCC/*.pl",

"echo SCRIPT: START makeClusterInitVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/StopStartHPCC/makeClusterInitVariables.pl $sshuser", 
{ "Ref" : "AWS::Region" },
{ "Ref": "AWS::StackName" } 
]
]
},
"echo SCRIPT: COMPLETED makeClusterInitVariables.pl",

"echo SCRIPT: START makeKeypairAndEmailPrivateKey.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/makeKeypairAndEmailPrivateKey.pl $sshuser", 
{ "Ref": "AWS::StackName" }, 
{ "Ref" : "MyEmailAddress" },
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: COMPLETED makeKeypairAndEmailPrivateKey.pl",

"echo SCRIPT: 'START Signal stack that setup of  System is complete.'",
{
"Fn::Join" : [
" ", 
[
"echo /opt/aws/bin/cfn-signal --exit-code 0 --stack ", 
{ "Ref": "AWS::StackName" }, 
"--resource BastionInstance", 
"--region ", 
{ "Ref" : "AWS::Region" }
]
]
},
{
"Fn::Join" : [
" ", 
[
"/opt/aws/bin/cfn-signal --exit-code 0 --stack ", 
{ "Ref": "AWS::StackName" }, 
"--resource BastionInstance", 
"--region ", 
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: 'COMPLETED Signal stack that setup of  System is complete.'",

"echo SCRIPT: START installPublicKeyGottenFromMaster.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/installPublicKeyGottenFromMaster.pl $sshuser", 
{ "Ref": "AWS::StackName" }, 
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: COMPLETED installPublicKeyGottenFromMaster.pl"
]
]
}
}
},
"CreationPolicy": {
"ResourceSignal": {
"Count" : 1,
"Timeout": "PT15M"
}
}
},

"SlaveASG" : {
"Type" : "AWS::AutoScaling::AutoScalingGroup",
"Properties" : {
"VPCZoneIdentifier" : [{ "Ref" : "HPCCSubnet"  }],
"Cooldown" : "300",
"PlacementGroup" : {"Ref" : "HPCCPlacementGroup" },
"DesiredCapacity" : {"Ref" : "NumberOfSlaveInstances" },
"HealthCheckGracePeriod" : "300",
"HealthCheckType" : "EC2",
"LaunchConfigurationName" : {"Ref" : "SlaveLaunchCfg" },
"MaxSize" : "10",
"MinSize" : "0",
"Tags" : [
{
"Key" : "StackName",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "pem",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "slavesPerNode",
"Value" : {"Ref" : "NumberOfSlavesPerInstance" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "roxienodes",
"Value" : {"Ref" : "NumberOfRoxieInstances" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "UserNameAndPassword",
"Value" : {"Ref" : "UserNameAndPassword" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "HPCCPlatform",
"Value" : {"Ref" : "HPCCPlatform" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "Name",
"Value" : {
"Fn::Join" : ["-",
[{
"Ref" : "AWS::StackName"
},
"-Slave"
]]
},
"PropagateAtLaunch" : "true"
}
]
},
"CreationPolicy": {
"ResourceSignal": {
"Count" : {"Ref" : "NumberOfSlaveInstances" },
"Timeout": "PT15M"
}
}
},

"SlaveLaunchCfg" : {
"Type" : "AWS::AutoScaling::LaunchConfiguration",
"DependsOn" : ["BastionInstance"],
"Properties" : {
"ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "64"]},
"InstanceType" : {"Ref" : "ClusterInstanceType" },
"AssociatePublicIpAddress" : "true",                                
"KeyName" : {"Ref" : "AWS::StackName" },
"SecurityGroups" : [ { "Ref" : "HPCCSecurityGroups" } ],
"BlockDeviceMappings" : [
{
"DeviceName": "/dev/sdb",
"VirtualName": "ephemeral0"
},
{
"DeviceName": "/dev/sdc",
"VirtualName": "ephemeral1"
},
{
"DeviceName": "/dev/sdd",
"VirtualName": "ephemeral2"
},
{
"DeviceName": "/dev/sde",
"VirtualName": "ephemeral3"
},
{
"DeviceName": "/dev/sdf",
"VirtualName": "ephemeral4"
},
{
"DeviceName": "/dev/sdg",
"VirtualName": "ephemeral5"
},
{
"DeviceName": "/dev/sdh",
"VirtualName": "ephemeral6"
},
{
"DeviceName": "/dev/sdi",
"VirtualName": "ephemeral7"
},
{
"DeviceName": "/dev/sdj",
"VirtualName": "ephemeral8"
},
{
"DeviceName": "/dev/sdk",
"VirtualName": "ephemeral9"
},
{
"DeviceName": "/dev/sdl",
"VirtualName": "ephemeral10"
},
{
"DeviceName": "/dev/sdm",
"VirtualName": "ephemeral11"
},
{
"DeviceName": "/dev/sdn",
"VirtualName": "ephemeral12"
},
{
"DeviceName": "/dev/sdo",
"VirtualName": "ephemeral13"
},
{
"DeviceName": "/dev/sdp",
"VirtualName": "ephemeral14"
},
{
"DeviceName": "/dev/sdq",
"VirtualName": "ephemeral15"
},
{
"DeviceName": "/dev/sdr",
"VirtualName": "ephemeral16"
},
{
"DeviceName": "/dev/sds",
"VirtualName": "ephemeral17"
},
{
"DeviceName": "/dev/sdt",
"VirtualName": "ephemeral18"
},
{
"DeviceName": "/dev/sdu",
"VirtualName": "ephemeral19"
},
{
"DeviceName": "/dev/sdv",
"VirtualName": "ephemeral20"
},
{
"DeviceName": "/dev/sdw",
"VirtualName": "ephemeral21"
},
{
"DeviceName": "/dev/sdx",
"VirtualName": "ephemeral22"
},
{
"DeviceName": "/dev/sdy",
"VirtualName": "ephemeral23"
}
],

"IamInstanceProfile" : {"Ref" : "HPCCInstanceProfile" },

"UserData" : {
"Fn::Base64" : {
"Fn::Join" : ["\n",
["#!/bin/bash", 
"# Step 1. Setup logging and having everything goto /var/log/user-data.log",
"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
"# Step 2. Do initial setupp, i.e. update and installs. Plus, set sshuser=<SSHUserName>",
"yum -y clean all\n",
"yum-config-manager --enable epel\n",
"yum -y update --security\n",
"echo yum -y update aws-cfn-bootstrap\n",
"echo yum -y install gcc\n",
"yum -y install gcc",
"echo pip install plumbum",
"pip install plumbum",
"yum -y update aws-cfn-bootstrap\n",
"echo yum -y install python-pip",
"yum -y install python-pip",
"sleep 10",
				"echo /usr/bin/pip-2.7 -v install pyyaml",
				"/usr/bin/pip-2.7 -v install pyyaml",
"yum -y install aws-cli",
{
"Fn::Join" : [
"", 
[
"sshuser=", 
{ "Ref" : "SSHUserName" }
]
]
},
"echo TLH: sshuser=\"$sshuser\"",
"# Step 3. cp contents of public s3 bucket, s3://publichpcc, to /home/$sshuser",
{
"Fn::Join" : [
" ", 
[
"aws s3 cp s3://publichpcc", 
"/home/$sshuser --recursive"
]
]
},
"echo SCRIPT: START put HPCC Managed Service IP in managed-service-ip.txt",
{
"Fn::Join" : [
"", 
[
"echo \"",
{ "Ref": "HPCCManagedServiceIP" },
"\" > /home/$sshuser/managed-service-ip.txt" 
]
]
},
"echo SCRIPT: COMPLETED put HPCC Managed Service IP in managed-service-ip.txt",
"# Step 4. Set ownership and permissions",
"chown $sshuser:$sshuser /home/$sshuser/*",
"chmod 755 /home/$sshuser/*.sh",
"chmod 755 /home/$sshuser/*.pl",
"chmod 755 /home/$sshuser/*s3",
"chmod 755 /home/$sshuser/*.py",
"chmod 400 /home/$sshuser/*.pem",
"chown $sshuser:$sshuser /home/$sshuser/StopStartHPCC/*",
"chmod 755 /home/$sshuser/StopStartHPCC/*.sh",
"chmod 755 /home/$sshuser/StopStartHPCC/*.pl",

"echo SCRIPT: START makeClusterInitVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/StopStartHPCC/makeClusterInitVariables.pl $sshuser", 
{ "Ref" : "AWS::Region" },
{ "Ref": "AWS::StackName" } 
]
]
},
"echo SCRIPT: COMPLETED makeClusterInitVariables.pl",

"# Step 5. Fill configuration file, /home/$sshuser/cfg_BestHPCC.sh, with this hpcc's configuration variables",
"echo SCRIPT: starting setupCfgFileVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setupCfgFileVariables.pl", 
"-clustercomponent Slave",
"-stackname",
{ "Ref": "AWS::StackName" },
"-region",
{ "Ref" : "AWS::Region" },
"-pem",
{"Ref" : "AWS::StackName" },
"-channels",
{ "Ref" : "NumberOfChannelsPerSlave" }
]
]
},
"echo SCRIPT: completed setupCfgFileVariables.pl",

"echo SCRIPT: starting saveIPOfTerminated.pl",
"/home/$sshuser/saveIPOfTerminated.pl",
"echo SCRIPT: completed saveIPOfTerminated.pl",

"# Step 6. Setup any volumes ebs or ephemeral",
"echo SCRIPT: starting setup_zz_zNxlarge_disks.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setup_zz_zNxlarge_disks.pl", 
{ "Ref" : "EBSVolumesSlave" },
"Slave"
]
]
},
"echo SCRIPT: completed setup_zz_zNxlarge_disks.pl",

"# Step 7. install hpcc platform and any other needed packages",
"echo SCRIPT: starting install_hpcc.sh",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/install_hpcc.sh", 
{ "Ref" : "InstallCassandra" }
]
]
},
"echo SCRIPT: completed install_hpcc.sh",

"echo SCRIPT: 'START Signal stack that setup of  System is complete.'",
{
"Fn::Join" : [
" ", 
[
"/opt/aws/bin/cfn-signal --exit-code 0 --stack ", 
{ "Ref": "AWS::StackName" }, 
"--resource SlaveASG", 
"--region ", 
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: 'COMPLETED Signal stack that setup of  System is complete.'"
]
]
}
}
}
},

"RoxieASG" : {
"Type" : "AWS::AutoScaling::AutoScalingGroup",
"Properties" : {
"VPCZoneIdentifier" : [{ "Ref" : "HPCCSubnet"  }],
"Cooldown" : "300",
"PlacementGroup" : {"Ref" : "HPCCPlacementGroup" },
"DesiredCapacity" : {"Ref" : "NumberOfRoxieInstances" },
"HealthCheckGracePeriod" : "300",
"HealthCheckType" : "EC2",
"LaunchConfigurationName" : {"Ref" : "RoxieLaunchCfg" },
"MaxSize" : "10",
"MinSize" : "0",
"Tags" : [
{
"Key" : "StackName",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "pem",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "slavesPerNode",
"Value" : {"Ref" : "NumberOfSlavesPerInstance" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "roxienodes",
"Value" : {"Ref" : "NumberOfRoxieInstances" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "UserNameAndPassword",
"Value" : {"Ref" : "UserNameAndPassword" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "HPCCPlatform",
"Value" : {"Ref" : "HPCCPlatform" },
"PropagateAtLaunch" : "true"
},
{ 
"Key" : "Name",
"Value" : {
"Fn::Join" : ["-",
[{
"Ref" : "AWS::StackName"
},
"-Roxie"
]]
},
"PropagateAtLaunch" : "true"
}
]
},
"CreationPolicy": {
"ResourceSignal": {
"Count" : { "Ref" : "NumberOfRoxieInstances" },
"Timeout": "PT15M"
}
}
},

"RoxieLaunchCfg" : {
"Type" : "AWS::AutoScaling::LaunchConfiguration",
"DependsOn" : ["BastionInstance"],
"Properties" : {
"ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "64"]},
"InstanceType" : {"Ref" : "ClusterInstanceType" },
"AssociatePublicIpAddress" : "true",                                
"KeyName" : {"Ref" : "AWS::StackName" },
"SecurityGroups" : [ { "Ref" : "HPCCSecurityGroups" } ],
"BlockDeviceMappings" : [
{
"DeviceName": "/dev/sdb",
"VirtualName": "ephemeral0"
},
{
"DeviceName": "/dev/sdc",
"VirtualName": "ephemeral1"
},
{
"DeviceName": "/dev/sdd",
"VirtualName": "ephemeral2"
},
{
"DeviceName": "/dev/sde",
"VirtualName": "ephemeral3"
},
{
"DeviceName": "/dev/sdf",
"VirtualName": "ephemeral4"
},
{
"DeviceName": "/dev/sdg",
"VirtualName": "ephemeral5"
},
{
"DeviceName": "/dev/sdh",
"VirtualName": "ephemeral6"
},
{
"DeviceName": "/dev/sdi",
"VirtualName": "ephemeral7"
},
{
"DeviceName": "/dev/sdj",
"VirtualName": "ephemeral8"
},
{
"DeviceName": "/dev/sdk",
"VirtualName": "ephemeral9"
},
{
"DeviceName": "/dev/sdl",
"VirtualName": "ephemeral10"
},
{
"DeviceName": "/dev/sdm",
"VirtualName": "ephemeral11"
},
{
"DeviceName": "/dev/sdn",
"VirtualName": "ephemeral12"
},
{
"DeviceName": "/dev/sdo",
"VirtualName": "ephemeral13"
},
{
"DeviceName": "/dev/sdp",
"VirtualName": "ephemeral14"
},
{
"DeviceName": "/dev/sdq",
"VirtualName": "ephemeral15"
},
{
"DeviceName": "/dev/sdr",
"VirtualName": "ephemeral16"
},
{
"DeviceName": "/dev/sds",
"VirtualName": "ephemeral17"
},
{
"DeviceName": "/dev/sdt",
"VirtualName": "ephemeral18"
},
{
"DeviceName": "/dev/sdu",
"VirtualName": "ephemeral19"
},
{
"DeviceName": "/dev/sdv",
"VirtualName": "ephemeral20"
},
{
"DeviceName": "/dev/sdw",
"VirtualName": "ephemeral21"
},
{
"DeviceName": "/dev/sdx",
"VirtualName": "ephemeral22"
},
{
"DeviceName": "/dev/sdy",
"VirtualName": "ephemeral23"
}
],

"IamInstanceProfile" : {"Ref" : "HPCCInstanceProfile" },

"UserData" : {
"Fn::Base64" : {
"Fn::Join" : ["\n",
["#!/bin/bash", 
"# Step 1. Setup logging and having everything goto /var/log/user-data.log",
"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
"# Step 2. Do initial setupp, i.e. update and installs. Plus, set sshuser=<SSHUserName>",
"yum -y clean all\n",
"yum-config-manager --enable epel\n",
"yum -y update --security\n",
"echo yum -y update aws-cfn-bootstrap\n",
"yum -y update aws-cfn-bootstrap\n",
"echo yum -y install gcc\n",
"yum -y install gcc",
"echo pip install plumbum",
"pip install plumbum",
"echo yum -y install python-pip",
"yum -y install python-pip",
"sleep 10",
				"echo /usr/bin/pip-2.7 -v install pyyaml",
				"/usr/bin/pip-2.7 -v install pyyaml",
"yum -y install aws-cli",
{
"Fn::Join" : [
"", 
[
"sshuser=", 
{ "Ref" : "SSHUserName" }
]
]
},
"echo TLH: sshuser=\"$sshuser\"",
"# Step 3. cp contents of public s3 bucket, s3://publichpcc, to /home/$sshuser",
{
"Fn::Join" : [
" ", 
[
"aws s3 cp s3://publichpcc", 
"/home/$sshuser --recursive"
]
]
},
"echo SCRIPT: START put HPCC Managed Service IP in managed-service-ip.txt",
{
"Fn::Join" : [
"", 
[
"echo \"",
{ "Ref": "HPCCManagedServiceIP" },
"\" > /home/$sshuser/managed-service-ip.txt" 
]
]
},
"echo SCRIPT: COMPLETED put HPCC Managed Service IP in managed-service-ip.txt",
"# Step 4. Set ownership and permissions",
"chown $sshuser:$sshuser /home/$sshuser/*",
"chmod 755 /home/$sshuser/*.sh",
"chmod 755 /home/$sshuser/*.pl",
"chmod 755 /home/$sshuser/*s3",
"chmod 755 /home/$sshuser/*.py",
"chmod 400 /home/$sshuser/*.pem",
"chown $sshuser:$sshuser /home/$sshuser/StopStartHPCC/*",
"chmod 755 /home/$sshuser/StopStartHPCC/*.sh",
"chmod 755 /home/$sshuser/StopStartHPCC/*.pl",

"echo SCRIPT: START makeClusterInitVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/StopStartHPCC/makeClusterInitVariables.pl $sshuser", 
{ "Ref" : "AWS::Region" },
{ "Ref": "AWS::StackName" } 
]
]
},
"echo SCRIPT: COMPLETED makeClusterInitVariables.pl",

"# Step 5. Fill configuration file, /home/$sshuser/cfg_BestHPCC.sh, with this hpcc's configuration variables",
"echo SCRIPT: starting setupCfgFileVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setupCfgFileVariables.pl", 
"-clustercomponent Roxie",
"-stackname",
{ "Ref": "AWS::StackName" },
"-region",
{ "Ref" : "AWS::Region" },
"-pem",
{"Ref" : "AWS::StackName" },
"-channels",
{ "Ref" : "NumberOfChannelsPerSlave" }
]
]
},
"echo SCRIPT: completed setupCfgFileVariables.pl",

"echo SCRIPT: starting saveIPOfTerminated.pl",
"/home/$sshuser/saveIPOfTerminated.pl",
"echo SCRIPT: completed saveIPOfTerminated.pl",

"# Step 6. Setup any volumes ebs or ephemeral",
"echo SCRIPT: starting setup_zz_zNxlarge_disks.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setup_zz_zNxlarge_disks.pl", 
{ "Ref" : "EBSVolumesRoxie" },
"Roxie"
]
]
},
"echo SCRIPT: completed setup_zz_zNxlarge_disks.pl",

"# Step 7. install hpcc platform and any other needed packages",
"echo SCRIPT: starting install_hpcc.sh",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/install_hpcc.sh", 
{ "Ref" : "InstallCassandra" }
]
]
},
"echo SCRIPT: completed install_hpcc.sh",

"echo SCRIPT: 'START Signal stack that setup of  System is complete.'",
{
"Fn::Join" : [
" ", 
[
"/opt/aws/bin/cfn-signal --exit-code 0 --stack ", 
{ "Ref": "AWS::StackName" }, 
"--resource RoxieASG", 
"--region ", 
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: 'COMPLETED Signal stack that setup of  System is complete.'"
]
]
}
}
}
},

"MasterASG" : {
"Type" : "AWS::AutoScaling::AutoScalingGroup",
"DependsOn" : ["BastionInstance","RoxieASG","SlaveASG"],
"Properties" : {
"VPCZoneIdentifier" : [{ "Ref" : "HPCCSubnet"  }],
"Cooldown" : "300",
"PlacementGroup" : {"Ref" : "HPCCPlacementGroup" },
"DesiredCapacity" : "1",
"HealthCheckGracePeriod" : "300",
"HealthCheckType" : "EC2",
"LaunchConfigurationName" : {"Ref" : "MasterLaunchCfg" },
"MaxSize" : "1",
"MinSize" : "1",
"Tags" : [
{
"Key" : "StackName",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "pem",
"Value" : {"Ref" : "AWS::StackName" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "slavesPerNode",
"Value" : {"Ref" : "NumberOfSlavesPerInstance" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "roxienodes",
"Value" : {"Ref" : "NumberOfRoxieInstances" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "UserNameAndPassword",
"Value" : {"Ref" : "UserNameAndPassword" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "HPCCPlatform",
"Value" : {"Ref" : "HPCCPlatform" },
"PropagateAtLaunch" : "true"
},
{
"Key" : "Name",
"Value" : {
"Fn::Join" : ["-",
[{
"Ref" : "AWS::StackName"
},
"-Master"
]]
},
"PropagateAtLaunch" : "true"
}
]
},
"CreationPolicy": {
"ResourceSignal": {
"Count" : 1,
"Timeout": "PT15M"
}
}
},

"MasterLaunchCfg" : {
"Type" : "AWS::AutoScaling::LaunchConfiguration",
"DependsOn" : ["BastionInstance","RoxieASG","SlaveASG"],
"Properties" : {
"ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "64"]},
"InstanceType" : {"Ref" : "ClusterInstanceType" },
"AssociatePublicIpAddress" : "true",                                
"KeyName" : {"Ref" : "AWS::StackName" },
"SecurityGroups" : [ { "Ref" : "HPCCSecurityGroups" } ],
"BlockDeviceMappings" : [
{
"DeviceName": "/dev/sdb",
"VirtualName": "ephemeral0"
},
{
"DeviceName": "/dev/sdc",
"VirtualName": "ephemeral1"
},
{
"DeviceName": "/dev/sdd",
"VirtualName": "ephemeral2"
},
{
"DeviceName": "/dev/sde",
"VirtualName": "ephemeral3"
},
{
"DeviceName": "/dev/sdf",
"VirtualName": "ephemeral4"
},
{
"DeviceName": "/dev/sdg",
"VirtualName": "ephemeral5"
},
{
"DeviceName": "/dev/sdh",
"VirtualName": "ephemeral6"
},
{
"DeviceName": "/dev/sdi",
"VirtualName": "ephemeral7"
},
{
"DeviceName": "/dev/sdj",
"VirtualName": "ephemeral8"
},
{
"DeviceName": "/dev/sdk",
"VirtualName": "ephemeral9"
},
{
"DeviceName": "/dev/sdl",
"VirtualName": "ephemeral10"
},
{
"DeviceName": "/dev/sdm",
"VirtualName": "ephemeral11"
},
{
"DeviceName": "/dev/sdn",
"VirtualName": "ephemeral12"
},
{
"DeviceName": "/dev/sdo",
"VirtualName": "ephemeral13"
},
{
"DeviceName": "/dev/sdp",
"VirtualName": "ephemeral14"
},
{
"DeviceName": "/dev/sdq",
"VirtualName": "ephemeral15"
},
{
"DeviceName": "/dev/sdr",
"VirtualName": "ephemeral16"
},
{
"DeviceName": "/dev/sds",
"VirtualName": "ephemeral17"
},
{
"DeviceName": "/dev/sdt",
"VirtualName": "ephemeral18"
},
{
"DeviceName": "/dev/sdu",
"VirtualName": "ephemeral19"
},
{
"DeviceName": "/dev/sdv",
"VirtualName": "ephemeral20"
},
{
"DeviceName": "/dev/sdw",
"VirtualName": "ephemeral21"
},
{
"DeviceName": "/dev/sdx",
"VirtualName": "ephemeral22"
},
{
"DeviceName": "/dev/sdy",
"VirtualName": "ephemeral23"
}
],

"IamInstanceProfile" : {"Ref" : "HPCCInstanceProfile" },

"UserData" : {
"Fn::Base64" : {
"Fn::Join" : ["\n",
["#!/bin/bash", 
"# Step 1. Setup logging and having everything goto /var/log/user-data.log",
"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
"# Step 2. Do initial setupp, i.e. update and installs. Plus, set sshuser=<SSHUserName>",
"yum -y clean all\n",
"yum-config-manager --enable epel\n",
"yum -y update --security\n",
"echo yum -y update aws-cfn-bootstrap\n",
"yum -y update aws-cfn-bootstrap\n",
"echo yum -y install gcc\n",
"yum -y install gcc",
"echo pip install plumbum",
"pip install plumbum",
"echo yum -y install python-pip",
"yum -y install python-pip",
"sleep 10",
				"echo /usr/bin/pip-2.7 -v install pyyaml",
				"/usr/bin/pip-2.7 -v install pyyaml",
"yum -y install aws-cli",
{
"Fn::Join" : [
"", 
[
"sshuser=", 
{ "Ref" : "SSHUserName" }
]
]
},
"echo TLH: sshuser=\"$sshuser\"",
"# Step 3. cp contents of public s3 bucket, s3://publichpcc, to /home/$sshuser",
{
"Fn::Join" : [
" ", 
[
"aws s3 cp s3://publichpcc", 
"/home/$sshuser --recursive"
]
]
},
"echo SCRIPT: START put HPCC Managed Service IP in managed-service-ip.txt",
{
"Fn::Join" : [
"", 
[
"echo \"",
{ "Ref": "HPCCManagedServiceIP" },
"\" > /home/$sshuser/managed-service-ip.txt" 
]
]
},
"echo SCRIPT: COMPLETED put HPCC Managed Service IP in managed-service-ip.txt",
"# Step 4. Set ownership and permissions",
"chown $sshuser:$sshuser /home/$sshuser/*",
"chmod 755 /home/$sshuser/*.sh",
"chmod 755 /home/$sshuser/*.pl",
"chmod 755 /home/$sshuser/*s3",
"chmod 755 /home/$sshuser/*.py",
"chmod 755 /home/$sshuser/lzmount",
"chmod 755 /home/$sshuser/exec_lzmount",
"chmod 400 /home/$sshuser/*.pem",
"chown $sshuser:$sshuser /home/$sshuser/StopStartHPCC/*",
"chmod 755 /home/$sshuser/StopStartHPCC/*.sh",
"chmod 755 /home/$sshuser/StopStartHPCC/*.pl",

"echo SCRIPT: START makeClusterInitVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/StopStartHPCC/makeClusterInitVariables.pl $sshuser", 
{ "Ref" : "AWS::Region" },
{ "Ref": "AWS::StackName" } 
]
]
},
"echo SCRIPT: COMPLETED makeClusterInitVariables.pl",

"# Step 5. Fill configuration file, /home/$sshuser/cfg_BestHPCC.sh, with this hpcc's configuration variables",
"echo SCRIPT: starting setupCfgFileVariables.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setupCfgFileVariables.pl", 
"-clustercomponent Master",
"-stackname",
{ "Ref": "AWS::StackName" },
"-region",
{ "Ref" : "AWS::Region" },
"-pem",
{"Ref" : "AWS::StackName" },
"-channels",
{ "Ref" : "NumberOfChannelsPerSlave" }
]
]
},
"echo SCRIPT: completed setupCfgFileVariables.pl",

"# Step 6. Setup any volumes ebs or ephemeral",
"echo SCRIPT: starting setup_zz_zNxlarge_disks.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/setup_zz_zNxlarge_disks.pl", 
{ "Ref" : "EBSVolumesMaster" },
"Master"
]
]
},
"echo SCRIPT: completed setup_zz_zNxlarge_disks.pl",

"# Step 7. install hpcc platform and any other needed packages",
"echo SCRIPT: starting install_hpcc.sh",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/install_hpcc.sh", 
{ "Ref" : "InstallCassandra" }
]
]
},
"echo SCRIPT: completed install_hpcc.sh",

"# Step 8. configure hpcc system, make environment.xml, and push it to all instances",
"echo SCRIPT: starting final_configureHPCC.sh",
"/home/$sshuser/final_configureHPCC.sh",
"echo SCRIPT: completed final_configureHPCC.sh",

"# Step 9. start the hpcc system",
"echo SCRIPT: starting startHPCCOnAllInstances.pl",
"/home/$sshuser/startHPCCOnAllInstances.pl",
"echo \"# Completed HPCC start on Master\" >> /home/$sshuser/cfg_BestHPCC.sh",
"echo SCRIPT: completed startHPCCOnAllInstances.pl",

"# Step 10. associate-eip.sh",
"echo SCRIPT: starting associate-eip.sh",
"/home/$sshuser/associate-eip.sh",
"echo SCRIPT: completed associate-eip.sh",

"# Step 11. if Cassandra should be installed, do so.",
"echo SCRIPT: starting cassandra if installed",
{
"Fn::If": [
"CassandraIsInstalled",
"/home/$sshuser/startCassandraOnAllInstances.pl",
"echo NOT INSTALLING Cassandra"
]
},
"echo SCRIPT: completed cassandra if installed",

"echo \"Put AutoscalingActivated=1 in /home/$sshuser/cfg_BestHPCC.sh\"",
"echo \"AutoscalingActivated=1\" >> /home/$sshuser/cfg_BestHPCC.sh",

"echo SCRIPT: 'Signal stack that setup of HPCC System is complete.'",
{
"Fn::Join" : [
" ", 
[
"/opt/aws/bin/cfn-signal -e 0 --stack ", 
{ "Ref": "AWS::StackName" }, 
"--resource MasterASG ", 
"--region ", 
{ "Ref" : "AWS::Region" }
]
]
},
"echo SCRIPT: 'Done signaling stack that setup of HPCC System has completed.'",

"echo SCRIPT: START setupForMountS3OnLZ.sh",
"/home/$sshuser/setupForMountS3OnLZ.sh", 
"echo SCRIPT: COMPLETED setupForMountS3OnLZ.sh",

"echo SCRIPT: START getResourceIdsAndTagWithRequired.pl",
{
"Fn::Join" : [
" ", 
[
"/home/$sshuser/getResourceIdsAndTagWithRequired.pl", 
{ "Ref" : "MyEmailAddress" }
]
]
},
"echo SCRIPT: COMPLETED getResourceIdsAndTagWithRequired.pl"
]
]
}
}
}
}      
}
}
