#!/usr/bin/perl
=pod

#============================================================
***IMPORTANT*** Before running this script STOP HPCC System =
#============================================================

This script does:
1. Detach all instances from their ASGs and decrement autoscaling capacity.
2. Stop all instances that have been detached (STOP MASTER instance LAST).
3. Output to asgnames.txt all asg names and their instances.
=cut
$ThisDir=($0 =~ /^(.+)[\\\/]/)? $1 : "." ;
require "$ThisDir/ClusterInitVariables.pl";

# NOTE: This scripts REQUIRES the aws cli be setup.

#================== Get Arguments ================================
if ( $ARGV[0] eq '-asgname' ){
  shift @ARGV;
  $in_asgname = shift @ARGV;
  print "DEBUG: GIVEN -asgname \"$in_asgname\"\n";
}
#===============END Get Arguments ================================
# Stop HPCC System
print("/home/ec2-user/stopHPCCOnAllInstances.pl\n");
my $rc=`/home/ec2-user/stopHPCCOnAllInstances.pl`;

print $rc;
if ( $rc =~ /Still NOT alive/si ){
  die "FATAL ERROR: While ssh'ing to bastion to stop all hpcc instances. Contact Tim Humphrey. EXITING.\n";
}

#-------------------------
# 1. Detach all instances from their ASGs and decrement autoscaling capacity.
# 2. Stop all instances that have been detached (STOP MASTER instance LAST).
# 3. Output to asgnames.txt all asg names and their instances.
#-------------------------
if ( scalar(@ARGV)>0 ){
  $stackname=shift @ARGV;
}
elsif ( $stackname eq '' ){
  die "USAGE ERROR $0. Stack name is NOT defined on ClusterInitVariables.pl. Contact Tim Humphrey. EXITING\n";
}

# Get json summary descriptions of all ASGs
$asgs_descriptions=`aws autoscaling describe-auto-scaling-instances --region $region 2> aws_errors.txt`;
my $err=`cat aws_errors.txt`;
if ( $err =~ /is now earlier than/ ){
  die "FATAL ERROR. Your computer's time is behind aws' time. Need to run \"sudo ntpdate -s time.nist.gov\" then try again. Contact Tim Humphrey. EXITING. \n";
}

@asgnames=ArrayOfValuesForKey('AutoScalingGroupName',$asgs_descriptions);
@asgnames=grep(/\b$stackname\b/,@asgnames);

# Remove MasterASG because it has already been removed
my @z=();
foreach (@asgnames){
     push @z, $_ if ($in_asgname eq '') || ( /$in_asgname/ );
}
@asgnames=@z;
print "BEGIN ASGs\n",join("\n",@asgnames),"\nEND ASGs\n"; # exit; # DEBUG DEBUG DEBUG

@asg_description=splitASGs($asgs_descriptions);
@asg_description=grep(/\b$stackname/,@asg_description);
#print "BEGIN ASGDs\n",join("\n#.........................................................\n",@asg_description),"\nEND ASGDs\n"; exit; # DEBUG DEBUG DEBUG

my @asgname_and_instances=();
foreach my $asgname (@asgnames){

  # Get asg description for $asgname
  my @asg=grep(/$asgname/s,@asg_description);
  my @asg_instance_id=ArrayOfValuesForKey('InstanceId',@asg);
#  print join("\n",@asg_instance_id),"\n";# exit;# DEBUG DEBUG DEBUG

  # Output current asg name and all its instances to asgnames.txt
  print "DEBUG: Output to asgnames.txt this:$asgname:".join(",",@asg_instance_id),"\n"; 
  push  @asgname_and_instances, "$asgname:".join(",",@asg_instance_id);

  foreach my $asg_instance_id (@asg_instance_id){

    print "Detach instance=$asg_instance_id from ASG=$asgname\n";
    print "aws autoscaling detach-instances --instance-ids $asg_instance_id --auto-scaling-group-name $asgname --should-decrement-desired-capacity --region $region\n";
    my $rc=`aws autoscaling detach-instances --instance-ids $asg_instance_id --auto-scaling-group-name $asgname --should-decrement-desired-capacity --region $region`;
    print $rc;
    if ( $rc !~ /Detaching EC2 instance/s ){
      die "FATAL ERROR. While attempting to detach instance, \"$asg_instance\". Contact Tim Humphrey. EXITING. \n";
    }

    # Stop Instance
    print "STOP instance=$asg_instance_id\n";
    print "aws ec2 stop-instances --instance-ids $asg_instance_id --region $region\n";
    my $rc=`aws ec2 stop-instances --instance-ids $asg_instance_id --region $region`;

    print $rc;
    if ( $rc !~ /StoppingInstances/s ){
      die "FATAL ERROR. While attempting to stop instance, \"$asg_instance\". Contact Tim Humphrey. EXITING. \n";
    }
  }
}

#OUTPUT names of all ASG to asgnames.txt
print "SAVE hpcc auto-scaling group ids and instances in \"asgnames.txt\"\n";
open(OUT,">asgnames.txt") || die "Can't open for output \"asgnames.txt\". Contact Tim Humphrey. EXITING.\n";
print OUT join("\n",@asgname_and_instances),"\n"; 
close(OUT);
#===========================================================
sub ArrayOfValuesForKey{
my ($key,@asg_descriptions)=@_;
my @d0=split("\n",join("\n",@asg_descriptions));
my @d1=grep(s/^ +\"$key\"\s*:\s*\"([^\"]+)\".*$/$1/,@d0);

# Remove duplicate names
my @asg_values=();
my %KeyValueExists=();
foreach (@d1){
  if ( ! exists($KeyValueExists{$_}) ){
     push @asg_values, $_;
     $KeyValueExists{$_}=1;
  }
}
return @asg_values;
}
#===========================================================
sub splitASGs{
my ( $x )=@_;
$x =~ s/^.+\"AutoScalingInstances\"\s*: *\[\s*\n//s;
$x =~ s/\n +\]\s*\n\}\s*$//s;
#print $x,"\n";

my @y=split(/\n( +)\},\s*\n/s,$x);
@y=grep(!/^\s*$/,@y);

return @y;
}
#===========================================================
